;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname 299ex) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Exercise 299
;; ------------
;; Design a data representation for finite and infinite sets so that you can
;; represent the sets of all odd numbers, all even numbers, all numbers
;; divisible by 10, and so on.
;;
;; Design the functions add-element, which adds an element to a set; union,
;; which combines the elements of two sets; and intersect, which collects all
;; elements common to two sets.
;; 
;; Hint Mathematicians deal with sets as functions that consume a potential
;; element ed and produce #true only if ed belongs to the set.
;; -----------------------------------------------------------------------------



; A Set is a function
;    [N -> Boolean]
; intepretation. does N belong to the set?


(define set-of-odd-nums
  (lambda (elem) (odd? elem)))

(define set-of-even-nums
  (lambda (elem) (even? elem)))

(define set-div-by-10
  (lambda (elem) (zero? (modulo elem 10))))


; Any Set -> Set
; the set generated by adding elem to set

(check-expect ((add-element 0 set-of-odd-nums) 0) #true)
(check-expect ((add-element 2 set-of-odd-nums) 0) #false)

(define (add-element elem set)
  (λ (e) (or (set e) (equal? elem e))))

; Set Set -> Set
; representation of union of s1 and s2

(check-expect ((union set-of-even-nums set-of-odd-nums) 2) #true)
(check-expect ((union set-of-even-nums set-of-odd-nums) 3) #true)

(define (union s1 s2)
  (λ (e) (or (s1 e) (s2 e))))

; Set Set -> Set
; representation of intersection of s1 and s2

(check-expect ((intersect set-div-by-10 set-of-odd-nums) 100) #false)
(check-expect ((intersect set-div-by-10 set-of-even-nums) 100) #true)

(define (intersect s1 s2)
  (λ (e) (and (s1 e) (s2 e))))

